import console;
import template;
import reflection;
import stringbuilder;
import domain;
import map;

class CustomObject {
    method (toString): string {
        return "CustomObject";
    }
}

class BrokenCustomObject {
    method (toString): int {
        return 1;
    }
}

class BrokenCustomObject2 {}

class Person {
    property name: string;
    property age: int;

    method (methodWithNoReturn) {}
    method (methodWithArgs a:int): int {
        return 1;
    }
    
    method (custom): CustomObject {
        return (CustomObject createDefault);
    }

    method (brokenCustom): BrokenCustomObject {
        return (BrokenCustomObject createDefault);
    }

    method (brokenCustom2): BrokenCustomObject2 {
        return (BrokenCustomObject2 createDefault);
    }

    method (intArray): [int] {
        return [1 2 3];
    }

    method (aborts): int {
        abort "failure";
        return 0;
    }

    ctor (create name:string age:int) {
        m_name = name;
        m_age = age;
    }
}

class ObjectWithCustomIntGet {
    method (get i: int): int {
        return (i * 2);
    }
}

class ObjectWithBadCustomGet {
    method (get i: StringRepresentable): any {
        return ((i toString) + "2");
    }
}

class ObjectWithCustomAnyGet {
    method (get i: any): any {
        return (((cast StringRepresentable i) toString) + "2");
    }
}

class ObjectWithCustomStringGet {
    method (get i: string): string {
        return (i + i);
    }
}

class ParentWithCustomGet {
    method (get index: int): string {
        return (index toString);
    }
}

class ChildWithCustomGet: ParentWithCustomGet {}

class ParentWithCustomToString {
    method (toString): string {
        return "parentWithCustomToString";
    }
}

class ChildWithCustomToString: ParentWithCustomToString {}

class EmbedsChildWithCustomToString {
    method (child): ChildWithCustomToString {
        return (ChildWithCustomToString createDefault);
    }
}

class CustomToStringReturnsNull {
    method (toString): string {
        return null;
    }
}

struct EmbedCustomStringReturnsNull {
    field m_dummyField: int;

    ctor (create dummyField: int) {
        m_dummyField = dummyField;
    }

    method ( null_ ): CustomToStringReturnsNull {
        return (CustomToStringReturnsNull createDefault);
    }
}

struct CustomGetReturnsNull {
    field m_dummyField: int;

    ctor (create dummyField: int) {
        m_dummyField = dummyField;
    }

    method (get i: int): string {
        return null;
    }
}

class CustomGetWithTooManyParams {
    method (get a:int b:float): string {
        return null;
    }
}

class CustomGetReturnsNothing {
    method (get a: int) {}
}

method class (StringReturner): string;

abstract class AbstractClass {}
interface Interface {}
alias AliasTest = int;
event class (TestEventClass);

[nativeSize=32]
struct BinaryBlob {}

class ObjectWithCustomGetAutoboxedToAny {
    method (get obj: any): string {
        return ((cast StringRepresentable obj) toString);
    }
}

class RecursiveReference {
    field m_wrapped: string;

    method (get key: string): RecursiveReference {
        return (RecursiveReference create (m_wrapped + key));
    }

    method (toString): string {
        return m_wrapped;
    }

    ctor (create wrapped: string) {
        m_wrapped = wrapped;
    }
}

static class TemplateTest {
    static method (test input:string output:string) {
        p := (Person create "Peterson" 92);
        t := (Template create input (Type of p));
        r := (t render p);
        assert(r == output);
    }

    static method (testCustomGetReturnsNull) {
        p := (CustomGetReturnsNull create 1);
        t := (Template create "{666}" (Type of p));
        r := (t render p);
        assert(r == "");
    }

    static method (testToStringReturnsNull) {
        p := (EmbedCustomStringReturnsNull create 1);
        t := (Template create "{null_}" (Type of p));
        r := (t render p);
        assert(r == "");
    }

    static method (testFailable) {
        p: int? = 5;
        t := (Template create "hello, {unwrap}" "int?");
        r := (t render p);
        assert(r == "hello, 5");
    }

    static method (assertCrashed action: Action) {
        crashed: bool = true;
        Domain try ^{
            action invoke;
            crashed = false;
        };
        assert crashed;
    }
    
    static method (testInheritance) {
        p := (ChildWithCustomGet createDefault);
        t := (Template create "{666}" (Type of p));
        r := (t render p);
        assert(r == "666");
    }

    static method (testInheritance2) {
        p := (EmbedsChildWithCustomToString createDefault);
        t := (Template create "{child}" (Type of p));
        r := (t render p);
        assert(r == "parentWithCustomToString");
    }

    static method (testEx input:string) {
        TemplateTest assertCrashed ^{
            p := (Person create "Peterson" 92);
            t := (Template create input (Type of p));
            r := (t render p);
        };
    }

    static method (testArr input:string output:string) {
        p := [(cast any 1) (cast any true) (cast any "Hello, World!")];
        t := (Template create input (Type of p));
        r := (t render p);
        assert(r == output);
    }

    static method (testArrEx input: string) {
        TemplateTest assertCrashed ^{
            p := [(cast any 1) (cast any true) (cast any "Hello, World!")];
            t := (Template create input (Type of p));
            r := (t render p);
        };
    }

    static method (testMap input:string output:string) {
        map := (Map create);
        map set 666 "six-six-six";
        map set "six-six-six" 666;

        t := (Template create input (Type of map));
        r := (t render map);
        assert(r == output);
    }
    
    static method (testCustomGet) {
        customGet := (ObjectWithCustomIntGet createDefault);
        t := (Template create "I'll take {4}." (Type of customGet));
        assert ((t render customGet) == "I'll take 8.");
    }

    static method (testCustomGet2) {
        TemplateTest assertCrashed ^{
            customGet := (ObjectWithBadCustomGet createDefault);
            t := (Template create "I'll take {4}." (Type of customGet));
        };
    }

    static method (testCustomGet3) {
        customGet := (ObjectWithCustomAnyGet createDefault);
        t := (Template create "{4} will be taken." (Type of customGet));
        assert ((t render customGet) == "42 will be taken.");
    }

    static method (testCustomGet4) {
        customGet := (ObjectWithCustomStringGet createDefault);
        t := (Template create "I'll take {'hello'}." (Type of customGet));
        assert ((t render customGet) == "I'll take hellohello.");
    }

    static method (testCustomGet5) {
        customGet := (ObjectWithCustomStringGet createDefault);
        t := (Template create "I'll take {'hello' length}" (Type of customGet));
        assert ((t render customGet) == "I'll take 10");
    }

    static method (testCustomGet6) {
        customGet := (ObjectWithCustomStringGet createDefault);
        t := (Template create "I'll take {'hello' length}." "ObjectWithCustomStringGet");
        assert ((t render customGet) == "I'll take 10.");
    }

    static method (testMultipleCalls) {
        s: string = "Hello, World!";
        t := (Template create "Letter: {4}." (Type of s));
        (0 to 10) loop ^(i: int) {
            r := (t render s);
            assert (r == "Letter: o.");
        };
    }

    static method (testNonExistingClass) {
        TemplateTest assertCrashed ^{
            t := (Template create "something" "nonexistingclass");
        };
    }
    
    static method (testValueType) {
        t := (Template create "Number: {toString length}" "int");
        r := (t render 666);
        assert(r == "Number: 3");
    }
    
    static method (testNull) {
        TemplateTest assertCrashed ^{
            Template create "hello" null;
        };
        
        TemplateTest assertCrashed ^{
            t := (Template create "hello" (Type of 1));
            t render null;
        };
    }

    static method (testClosure) {
        p: StringReturner = ^(): string {
            return "world!";
        };
        t := (Template create "hello, {invoke}" (Type of p));
        r := (t render p);
        assert(r == "hello, world!");
    }

    static method (testNonRenderable name: string) {
        TemplateTest assertCrashed ^{
            t := (Template create "test" name);
        };
    }

    static method (testTooManyParams) {
        TemplateTest assertCrashed ^{
            c := (CustomGetWithTooManyParams createDefault);
            t := (Template create "{0}" (Type of c));
        };
    }

    static method (testReturnsNothing) {
        TemplateTest assertCrashed ^{
            c := (CustomGetWithTooManyParams createDefault);
            t := (Template create "{0}" (Type of c));
        };
    }

    static method (testAutoBoxingIntArg) {
        c := (ObjectWithCustomGetAutoboxedToAny createDefault);
        t := (Template create "{2}" (Type of c));
        r := (t render c);
        assert(r == "2");
    }
    
    static method (testAutoBoxingIntArg2) {
        m := (Map create);
        m set 666 "13";
        t := (Template create "{666}" "Map");
        r := (t render m);
        assert(r == "13");
    }

    static method (testSpaceInsideQuote) {
        m := (Map create);
        m set "a key" "a value";
        t := (Template create "I have {'a key'}." "Map");
        r := (t render m);
        assert (r == "I have a value.");
    }

    static method (testSpaceInsideQuote2) {
        m := (RecursiveReference create "1");
        t := (Template create "I have {'2' '3'}" "RecursiveReference");
        r := (t render m);
        assert (r == "I have 123");
    }
    
    static method (testSpaceInsideQuote3) {
        TemplateTest assertCrashed ^{
            m := (RecursiveReference create "1");
            t := (Template create "I have {'2''3'}" "RecursiveReference");
        };
    }

    static method (testSpaceInsideQuote4) {
        TemplateTest assertCrashed ^{
            m := (RecursiveReference create "1");
            t := (Template create "I have {'3}" "RecursiveReference");
        };
    }

    static method (testSpaceInsideQuote5) {
        m := (RecursiveReference create "1");
        t := (Template create "I have {'2'   }" "RecursiveReference");
        r := (t render m);
        assert (r == "I have 12");
    }

    static method (testSpaceInsideQuote6) {
        TemplateTest assertCrashed ^{
            m := (RecursiveReference create "1");
            t := (Template create "I have {'3'length}" "RecursiveReference");
        };
    }

    [test]
    static method (main) {
        TemplateTest test "Hello, {name}!" "Hello, Peterson!";
        TemplateTest test "Hello, {name length}!" "Hello, 8!";
        TemplateTest test "Hello, Name!" "Hello, Name!";
        TemplateTest test "" "";
        TemplateTest test "{name}" "Peterson";
        TemplateTest test "{name}! You are cool!" "Peterson! You are cool!";
        TemplateTest test "{name}! You are cool! You are {age}" "Peterson! You are cool! You are 92";
        TemplateTest test "{name}! You are cool! You are {age} years old" "Peterson! You are cool! You are 92 years old";
        TemplateTest test "I like you, {name}" "I like you, Peterson";
        TemplateTest test "I like you, {name}" "I like you, Peterson";
        TemplateTest test "I like you, {name}{age}" "I like you, Peterson92";
        TemplateTest test "{custom}" "CustomObject";
        TemplateTest test "{intArray 2}" "3";
        TemplateTest test "{intArray 2 hashCode toString}" "3";

        TemplateTest testEx "{hello";
        TemplateTest testEx "{";
        TemplateTest testEx "}";
        TemplateTest testEx "{}";
        TemplateTest testEx "hello{name{age}}";
        TemplateTest testEx "hello{name age}}";
        TemplateTest testEx "{methodWithNoReturn}";
        TemplateTest testEx "{methodWithArgs}";
        TemplateTest testEx "{brokenCustom}";
        TemplateTest testEx "{brokenCustom2}";
        TemplateTest testEx "{unknownMethod}";
        TemplateTest testEx "{aborts}";

        TemplateTest testArr "A{0}B{1}C{2}D" "A1BtrueCHello, World!D";

        TemplateTest testArrEx "A{100}";
        TemplateTest testArrEx "A{-1}";

        TemplateTest testMap "{'six-six-six'} {666}" "666 six-six-six";

        TemplateTest assertCrashed ^{
            p := (Person create "Peterson" 92);
            t := (Template create "{name}" (Type of p));
            r := (t render 1);
        };

        TemplateTest testCustomGet;
        TemplateTest testCustomGet2;
        TemplateTest testCustomGet3;
        TemplateTest testCustomGet4;
        TemplateTest testCustomGet5;
        TemplateTest testCustomGet6;
        TemplateTest testMultipleCalls;
        TemplateTest testNonExistingClass;
        TemplateTest testInheritance;
        TemplateTest testInheritance2;
        TemplateTest testValueType;
        TemplateTest testNull;
        TemplateTest testToStringReturnsNull;
        TemplateTest testCustomGetReturnsNull;
        TemplateTest testFailable;
        TemplateTest testClosure;

        TemplateTest testNonRenderable "BinaryBlob";
        TemplateTest testNonRenderable "StringBuilder*";
        TemplateTest testNonRenderable "TemplateTest";
        TemplateTest testNonRenderable "AbstractClass";
        TemplateTest testNonRenderable "Interface";
        TemplateTest testNonRenderable "AliasTest";
        TemplateTest testNonRenderable "TestEventClass";

        TemplateTest testTooManyParams;
        TemplateTest testReturnsNothing;
        TemplateTest testAutoBoxingIntArg;
        TemplateTest testAutoBoxingIntArg2;
        TemplateTest testSpaceInsideQuote;
        TemplateTest testSpaceInsideQuote2;
        TemplateTest testSpaceInsideQuote3;
        TemplateTest testSpaceInsideQuote4;
        TemplateTest testSpaceInsideQuote5;
        TemplateTest testSpaceInsideQuote6;
    }
}